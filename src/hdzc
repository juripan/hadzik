#!/usr/bin/env python3

import sys
import os
import time

from lexer import Tokenizer
from parser import Parser
from typechecker import TypeChecker
from generator import Generator
from errors import ErrorHandler

compiler_silent = False

def hdz_help():
    """
    prints out the usage information,
    ends the program with exit code 0
    """
    
    print(
    """Usage:
    $ python3 hdzc src_code [-h] [-s] [-n DEST] [-c] [-r] [-d]
Or running it like an executable:
    $ ./hdzc src_code [-h] [-s] [-n DEST] [-c] [-r] [-d]

arguments:
    src_code    path to your source code

options:
    -h, --help  displays user manual
    -s          switches on the east slovak error messages
    -c          removes all of the log statements printed during compilation
    -r          runs the compiled file and prints its output after compilation is done
    -n DEST     determine a path and name of the compiled file
    -d          dumps all of the compiler debug information available to the console""")
    exit(0)


def compile_to_asm(file_path: str) -> list[str]:
    """
    tokenizes, parses, typechecks and generates assembly,
    exits with 1 if the filepath isn't valid
    """
    try:
        with open(file_path, "r") as f:
            hdz_src: str = f.read()
    except FileNotFoundError:
        print("ERROR: Nonexistent file / file path", file=sys.stderr)
        exit(1)
    
    start = time.time()
    tokens = Tokenizer(hdz_src).tokenize()
    elapsed = time.time() - start
    if not compiler_silent:
        print(f"[INFO] Lexing took {elapsed:.6f} seconds")

    if ErrorHandler.debug_mode:
        print(tokens)
        print("-" * 130)
    
    start = time.time()
    parse_tree = Parser(tokens, hdz_src).parse_program()
    elapsed = time.time() - start
    if not compiler_silent:
        print(f"[INFO] Parsing took {elapsed:.6f} seconds")

    start = time.time()
    TypeChecker(parse_tree, hdz_src).typecheck_program()
    elapsed = time.time() - start
    if not compiler_silent:
        print(f"[INFO] Typechecking took {elapsed:.6f} seconds")
    
    if ErrorHandler.debug_mode:
        print(parse_tree)
        print("-" * 130)
    start = time.time()
    final_asm = Generator(parse_tree, hdz_src).gen_program()
    elapsed = time.time() - start
    if not compiler_silent:
        print(f"[INFO] Generating took {elapsed:.6f} seconds")
    return final_asm


def asm_to_bin(filepath_no_hdz: str, content: list[str]):
    """
    makes an assembly file and links and assembles it by calling fasm
    if linking or assembling fails it throws an error and exits with 1
    """
    with open("./" + filepath_no_hdz + ".asm", "w") as f:
        f.writelines(content)
    start = time.time()
    if os.system("fasm " + filepath_no_hdz + ".asm >> /dev/null"):
        print("ERROR: assembly failed", file=sys.stderr)
        exit(1)
    elapsed = time.time() - start
    if not compiler_silent:
        print(f"[INFO] Assembling took {elapsed:.6f} seconds")


def hdz_run(executable: str):
    """
    runs the executable and prints out its exit code
    """
    print("Program output".center(80, "-"))
    exit_code = os.system("./" + executable)
    print("-" * 80)
    print(f"Program exited with: {exit_code % 255}") # exit code 1 is 256 for some reason


def main():
    global compiler_silent
    all_flags: tuple[str, ...] = tuple(filter(lambda x: x[0] == "-", sys.argv))
    non_flags: tuple[str, ...] = tuple(filter(lambda x: x[0] != "-", sys.argv))[1:]

    if len(sys.argv) < 2 or "--help" in all_flags:
        hdz_help()

    if len(non_flags) == 0:
        print("ERROR: File extension is missing", file=sys.stderr)
        exit(1)

    file_path: str = non_flags[0]
    if not file_path.endswith(".hdz"):
        print("ERROR: File extension is missing or invalid (file extension must be .hdz)", file=sys.stderr)
        exit(1)
    
    ErrorHandler.file_path = file_path

    if "-s" in all_flags:
        ErrorHandler.dialect_errors = True
    if "-d" in all_flags:
        ErrorHandler.debug_mode = True
    if "-c" in all_flags:
        compiler_silent = True
    
    if "-n" in all_flags and len(non_flags) <= 1:
        print("ERROR: Missing file path when using the 'n' flag", file=sys.stderr)
        exit(1)
    elif "-n" in all_flags:
        filepath_no_hdz = non_flags[1]
    else:
        filepath_no_hdz = file_path.rsplit(".", 1)[0] # removes the file extension
    
    final_asm = compile_to_asm(file_path)
    
    asm_to_bin(filepath_no_hdz, final_asm)

    if "-r" in all_flags:
        hdz_run(filepath_no_hdz)

if __name__ == "__main__":
    main()